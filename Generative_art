
width = 840
height = width
ss = 70   # ss means square size


def setup():
    size(width,height)
    background(255)

def rand_cross_sym():
    ost = width - ss #offset
    
    main_col = [random(255),random(255),random(255)]
    off_col  = [random(255),random(255),random(255)]
    shading  = [random(255),random(255),random(255)]
    
    
    for i in range(0,width/2,ss):
        for j in range(0,width/2,ss):
            if random(0,1) < 0.3:
                fill(main_col[0],main_col[1],main_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                rect(j,ost-i,ss,ss)
                rect(ost-j,ost-i,ss,ss)
            elif random(0,1) < 0.2:
                fill(off_col[0],off_col[1],off_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                rect(j,ost-i,ss,ss)
                rect(ost-j,ost-i,ss,ss)
            elif random(0,1) < 0.1:
                fill(shading[0],shading[1],shading[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                rect(j,ost-i,ss,ss)
                rect(ost-j,ost-i,ss,ss)
            else:
                pass

def rand_mirror_sym():
    ost = width - ss #offset
    
    main_col = [random(255),random(255),random(255)]
    off_col  = [random(255),random(255),random(255)]
    shading  = [random(255),random(255),random(255)]
    
    
    for i in range(0,height,ss):
        for j in range(0,width/2,ss):
            if random(0,1) < 0.3:
                fill(main_col[0],main_col[1],main_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
            elif random(0,1) < 0.2:
                fill(off_col[0],off_col[1],off_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
            elif random(0,1) < 0.1:
                fill(shading[0],shading[1],shading[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
            else:
                pass
                
def weighted_mirror_sym():
    ost = width - ss #offset
    
    main_col = [random(255),random(255),random(255)]
    off_col  = [random(255),random(255),random(255)]
    shading  = [random(255),random(255),random(255)]
    
    tracker = [[]]
    current = -1
    
    for i in range(0,height,ss):
        current += 1
        weight = 0
        if current > 0:
            tracker.append([])
        
        for j in range(0,width/2,ss):
            if random(0,1) < (-0.1 + weight):
                fill(main_col[0],main_col[1],main_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                tracker[current].append(1)
            elif random(0,1) < (-0.2 + weight):
                fill(off_col[0],off_col[1],off_col[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                tracker[current].append(2)
            elif random(0,1) < (-0.3 + weight):
                fill(shading[0],shading[1],shading[2])
                rect(j,i,ss,ss)
                rect(ost-j,i,ss,ss)
                tracker[current].append(3)
            else:
                tracker[current].append(0)
                pass
            
            weight += 0.1
            
    little = -1
    big    = -1
    
    for i in range(0,height,ss):
        is_zero = True
        big +=1
        little = -1
        
        for j in range(0,width/2,ss):
            little +=1
            
            if is_zero == True:
                if tracker[big][little] == 0:
                    fill(0)
                    rect(j,i,ss,ss)
                    rect(ost-j,i,ss,ss)
                else:
                    is_zero = False
            else:
                pass

def draw():

    if ((keyPressed) and (key == '4')):
     background(255)
     noStroke()
     rand_cross_sym()
    elif ((keyPressed) and (key == '2')):
     background(255)
     noStroke()
     rand_mirror_sym()
    elif ((keyPressed) and (key == 'w')):
     background(255)
     noStroke()
     weighted_mirror_sym()
    else:
        pass
    
